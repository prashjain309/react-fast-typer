{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","reset","setState","inputText","matchedString","unMatchedString","state","apiText","done","handleChange","event","value","target","_this$state","_this$state$unMatched","_this$state$matchedSt","stringToMatch","slice","length","lastLetter","split","inActiveText","_this$state2","_this$state2$matchedS","_this$state2$unMatche","_this$state2$inputTex","activeText","matchFound","activeMatching","toConsumableArray","forEach","letter","index","activeNotMatching","react_default","a","createElement","className","onChange","placeholder","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAuHeA,qBAnHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBRQ,MAAQ,WACNP,EAAKQ,SAAS,CACZC,UAAW,GACXC,cAAe,GACfC,gBAAiBX,EAAKY,MAAMC,SAAW,GACvCC,MAAM,KAxBSd,EA4BnBe,aAAe,SAAAC,GAAS,IACdC,EAAUD,EAAME,OAAhBD,MADcE,EAE+BnB,EAAKY,MAFpCQ,EAAAD,EAEdR,uBAFc,IAAAS,EAEI,GAFJA,EAAAC,EAAAF,EAEQT,qBAFR,IAAAW,EAEwB,GAFxBA,EAIhBC,EAAgBX,EAAgBY,MAAM,EAAGN,EAAMO,QAC/CC,EAAaR,EAAMA,EAAMO,OAAS,GAEpCP,EAAMO,OAAS,KAEfF,IAAkBL,GAED,MAAfQ,GAAsBR,IAAUN,EAYtCX,EAAKQ,SAAS,CACZC,UAAWQ,IAZTjB,EAAKQ,SACH,CACEG,gBAAiBA,EAAgBe,MAAMJ,GAAe,IAAM,GAC5DZ,cAAeA,EAAgBY,EAC/Bb,UAAW,GACXK,KAAMG,IAAUN,MA3CxBX,EAAKY,MAAQ,CACXC,QAAS,GACTJ,UAAW,GACXC,cAAe,GACfC,gBAAiB,GACjBG,MAAM,GAPSd,mFAajBG,KAAKK,SAAS,CACZK,QAFc,qBAGdF,gBAHc,wDA4CT,IAWHgB,EAXGC,EAMHzB,KAAKS,MANFiB,EAAAD,EAELlB,qBAFK,IAAAmB,EAEW,GAFXA,EAAAC,EAAAF,EAGLjB,uBAHK,IAAAmB,EAGa,GAHbA,EAAAC,EAAAH,EAILnB,iBAJK,IAAAsB,EAIO,GAJPA,EAKLjB,EALKc,EAKLd,KAGIkB,EAAarB,EAAgBY,MAAM,EAAGd,EAAUe,SAAW,GAC7DS,GAAa,EAIjBN,EAAehB,EAAgBY,MAC7Bd,EAAUe,OACVb,EAAgBa,QAGlB,IAAIU,EAAiB,GACrBD,GAAa,EAEbhC,OAAAkC,EAAA,EAAAlC,CAAI+B,GAAYI,QAAQ,SAACC,EAAQC,GAC3BL,GAAcI,IAAW5B,EAAU6B,GACrCJ,GAAkBG,EAElBJ,GAAa,IAIjB,IAAMM,EAAoBL,EACtBF,EAAWN,MAAMQ,GAAgB,GACjCF,EAEJ,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZ7B,GAAQ0B,EAAAC,EAAAC,cAAA,gDACP5B,GAAQ0B,EAAAC,EAAAC,cAAA,mCACVF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBjC,GAClC8B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BAA0BT,EAA1C,KACAM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,8BACbJ,GAEHC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBAAmBhB,KAEnCb,GACA0B,EAAAC,EAAAC,cAAA,SACEC,UAAU,aACV1B,MAAOd,KAAKS,MAAMH,UAClBmC,SAAUzC,KAAKY,aACf8B,YAAY,qBAGf/B,GAAQ0B,EAAAC,EAAAC,cAAA,UAAQI,QAAS3C,KAAKI,OAAtB,mCA9GCwC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.74438bf2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiText: \"\",\n      inputText: \"\",\n      matchedString: \"\",\n      unMatchedString: \"\",\n      done: false\n    };\n  }\n\n  componentDidMount() {\n    const apiText = \"one two three four\";\n    this.setState({\n      apiText,\n      unMatchedString: apiText\n    });\n  }\n\n  reset = () => {\n    this.setState({\n      inputText: \"\",\n      matchedString: \"\",\n      unMatchedString: this.state.apiText || \"\",\n      done: false\n    });\n  };\n\n  handleChange = event => {\n    const { value } = event.target;\n    const { unMatchedString = \"\", matchedString = \"\" } = this.state;\n\n    const stringToMatch = unMatchedString.slice(0, value.length);\n    const lastLetter = value[value.length - 1];\n\n    if (value.length > 12) return;\n\n    if (stringToMatch === value) {\n      // End of word, time to reset input\n      if (lastLetter === \" \" || value === unMatchedString) {\n        this.setState(\n          {\n            unMatchedString: unMatchedString.split(stringToMatch)[1] || \"\",\n            matchedString: matchedString + stringToMatch,\n            inputText: \"\",\n            done: value === unMatchedString\n          }\n        );\n        return;\n      }\n    }\n    this.setState({\n      inputText: value\n    });\n  };\n\n  render() {\n    const {\n      matchedString = \"\",\n      unMatchedString = \"\",\n      inputText = \"\",\n      done\n    } = this.state;\n\n    const activeText = unMatchedString.slice(0, inputText.length) || \"\";\n    let matchFound = true;\n\n    let inActiveText = \"\";\n\n    inActiveText = unMatchedString.slice(\n      inputText.length,\n      unMatchedString.length\n    );\n\n    let activeMatching = \"\";\n    matchFound = true;\n\n    [...activeText].forEach((letter, index) => {\n      if (matchFound && letter === inputText[index]) {\n        activeMatching += letter;\n      } else {\n        matchFound = false;\n      }\n    });\n\n    const activeNotMatching = activeMatching\n      ? activeText.split(activeMatching)[1]\n      : activeText;\n\n    return (\n      <div className=\"words\">\n        {done && <div>Congrats! You finished the race!</div>}\n        {!done && <div>Type the below Words</div>}\n        <div className=\"question\">\n          <span className=\"matched-string\">{matchedString}</span>\n          <span className=\"active matching-string\">{activeMatching}|</span>\n          <span className=\"active not-matching-string\">\n            {activeNotMatching}\n          </span>\n          <span className=\"inactive-string\">{inActiveText}</span>\n        </div>\n        {!done && (\n          <input\n            className=\"text-input\"\n            value={this.state.inputText}\n            onChange={this.handleChange}\n            placeholder=\"Please type here\"\n          />\n        )}\n        {done && <button onClick={this.reset}>Click here to try again</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}